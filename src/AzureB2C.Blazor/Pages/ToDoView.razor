@inherits LayoutComponentBase
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;
@using AzureB2C.Blazor.Services
@using AzureB2C.Data.Context
@using AzureB2C.Data.Model
@using Finbuckle.MultiTenant
@using Finbuckle.MultiTenant.Abstractions
@using Microsoft.AspNetCore.Components.Authorization
@using User = AzureB2C.Blazor.Models.User

@using Microsoft.Graph.Models
@using TenantInfo = AzureB2C.Data.Model.CustomerInfo
@inject AuthenticationStateProvider authenticationStateProvider
@inject UserService UserService
@inject IMultiTenantContextAccessor<TenantInfo> TenantContext
@inject IConfiguration Configuration

<button class="btn btn-success" onclick="@OnGet">Open Profile</button>
@if (flag)
{
    <AuthorizeView>
        <Authorized>
            <h2>User Profile</h2>
            <div>
                <p><strong>Name:</strong>@context.User.Identity.Name</p>
                <p><strong>Company Id:</strong>@context.User.FindFirstValue("extension_CustomerId") </p>
                <p><strong>Tenant Context: </strong>@TenantContext.MultiTenantContext.TenantInfo?.CustomerId</p>
            </div>
        </Authorized>
    </AuthorizeView>
}
<div>
    <input placeholder="Something todo..." @bind="newTodoTitle" />
    <input placeholder="Give me details..." @bind="newTodoDescription" />
    <button @onclick="AddTodo">Add Todo</button>
</div>
<ul>
@foreach (var item in ToDos)
{
    <li>
        <input type="checkbox" @bind="item.IsCompleted" />
        <input @bind="item.Title" />
    </li>
    <p>@item.Title + @item.Description</p>          
}
</ul>
<iframe title="Sample Report Demo" width="1140" height="541.25" src="https://playground.powerbi.com/sampleReportEmbed?customerId={CustomerId}" frameborder="0" allowFullScreen="true"></iframe>

@code{
    public bool flag;
    public bool Busy { get; set; }
    public User User { get; set; }
    public List<ToDo> ToDos { get; set; } = new List<ToDo>();
    private string? newTodoTitle;
    private string? newTodoDescription;
    private CustomerDbContext _dbContext;
    
    protected override async Task OnInitializedAsync()
    {
        Busy = true;
        
        try
        {
            if (TenantContext.MultiTenantContext.IsResolved == true)
            {
                var options = new DbContextOptionsBuilder<CustomerDbContext>();
                options.UseSqlServer(Configuration.GetConnectionString("IdentityDatabase"));
                _dbContext = new CustomerDbContext(TenantContext.MultiTenantContext.TenantInfo!, options.Options);
                ToDos = await _dbContext.Todos.ToListAsync();
            }
        }
        finally
        {
            Busy = false;
        }

        await base.OnInitializedAsync();
    }

    private async Task AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodoTitle)
            && !string.IsNullOrWhiteSpace(newTodoDescription))
        {
            var todo = new ToDo()
            {
                Description = newTodoDescription,
                CompletedDateTimeStamp = null,
                IsCompleted = false,
                Title = newTodoTitle,
                Id = Guid.NewGuid(),
            };
            await _dbContext.Todos.AddAsync(todo);
            await _dbContext.SaveChangesAsync();
            ToDos = await _dbContext.Todos.ToListAsync();
        }
    }

    public async void OnGet()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        if (authState?.User?.Identity?.IsAuthenticated == true)
        {
            User = new User()
            {
                Email = authState?.User?.FindFirst(c => c.Type == "emails")?.Value,
                FirstName = authState?.User?.FindFirst(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname")?.Value,
                LastName = authState?.User?.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value,
                Identityprovider = authState?.User?.FindFirst(c => c.Type == "http://schemas.microsoft.com/identity/claims/identityprovider")?.Value
            };
        }
        flag = true;
    }
 }
